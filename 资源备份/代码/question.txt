C51CD8E64B0AEB778364765013DF9EBE

<q123456>
UPDATE [dbo].[SYS_USER] set PASSWORD='C51CD8E64B0AEB778364765013DF9EBE'  WHERE account in ('10000','1000','superadmin','logadmin','configadmin','001','kyyplgtest','configadmin8561','superadmin8561','logadmin8561','admin8561','superadmin8563','configadmin8563','admin8563')

<q123456!>
UPDATE [dbo].[SYS_USER] set PASSWORD='16A8E4F58A9BC658843B09D32169D218'  WHERE account in ('10000','1000','superadmin','logadmin','configadmin','001','kyyplgtest','configadmin8561','superadmin8561','logadmin8561','admin8561','superadmin8563','configadmin8563','admin8563','sp900a','lg900a','cf900a','am900a','Tj20231030')

 <a href="${contextPath}/userAction!to_eplg.action">管理员登录</a>
 <a href="${contextPath}/userAction!to_login.action">科研登录</a>


<button class="ep_btn" onclick="window.location.href='${contextPath}/system/user/cfg/login'">管理员登录</button>
<button class="ep_btn" onclick="window.location.href='${contextPath}/system/user/login'">普通登录</button>

业务过滤如果配了【只读】，则科研人员无法进行编辑和删除。需要将业务过滤改为【可写】

对于数据的操作权限，在下面进行判断，如果不满足也是无法显示编辑和删除的
return getCheckRule(entity).checkWrite(entity);

使用@AppendSearch注解查询时，需要重启项目才会生效。

工作平台：sunzheng  密码：4Zy8vgd2

视频激活码：
XQIPTOQUNYYJOJXD8572762191890047

#windows的8080端口占用问题
netstat -ano | findstr 8080
taskkill -pid 7244 -f

#mac的8080端口占用问题
lsof -i tcp:8080
kill pid

如何判断科研秘书
com.eplugger.system.role.user.bo.BaseUserBO.getCurUserInfo().getUser().getGroups().contains("3")


并签和会签的区别：

并签只要有一个通过就可以通过，会签必须全部通过才可以通过。


//jar cvf  生成的jar包名称 -c 要进行打包的文件夹名称 .
jar cvf eadp5-5.9.16.1.jar -C eadp5-5.9.16.1 .

// sz※为字段绑定事件
$("#entity\\.previousProject_").on("change", changePreviousProject);

function changePreviousProject(){
// sz※ 选择了previousProject字段，将当前选择字段的值赋值给previousProjectId 。同时赋值span和Input完成持久化
	var previousProject = $(this).val();
	if("8888"!=previousProject){
		$("input[name='entity.previousProjectId']").val(previousProject);
		$("span[id='entity.previousProjectId_']").html(previousProject);
	}else{
		$("input[name='entity.previousProjectId']").val('');
		$("span[id='entity.previousProjectId_']").html('');
	}

}

####

// sz※ 截取字符串的sql
  //先截取前缀，再截取后缀。对获取的流水号进行最大值的判断，保证出现 9999 和 10000时能正确获取最大值为10000
            String sql = "";
            if (DBUtils.isSqlServer()) {
                 sql =  "select max(CONVERT(INT, LEFT((SUBSTRING(:attr,"+(prefixStr.length()+1)+" , LEN(:attr) - 1)),len(SUBSTRING(:attr,"+(prefixStr.length()+1)+" , LEN(:attr) - 1)) -"+suffixLength+")))from :tableName where :attr like ':val'";

            } else if (DBUtils.isOracle() || DBUtils.isDm()) {
                 sql =  "select MAX(TO_NUMBER(SUBSTR(SUBSTR(:attr,"+(prefixStr.length()+1)+"),1,LENGTH(SUBSTR(:attr, "+(prefixStr.length()+1)+")) -"+suffixLength+"))) from :tableName where :attr like ':val'";

            } else if (DBUtils.isMySql()) {
                 sql = "select MAX(CAST(SUBSTRING(SUBSTRING(:attr, "+(prefixStr.length()+1)+"), 1, LENGTH(SUBSTRING(:attr, "+(prefixStr.length()+1)+")) - "+suffixLength+") AS SIGNED)) from :tableName where :attr like ':val'";

            sql = sql.replaceAll(":attr", columnName).replace(":tableName", tableName).replace(":val", sb.toString());

导入时如何处理的负责人信息？
在ProjectExcelImpProcess类中的processCell中对负责人信息进行了处理，processCell代表对导入数据的预处理，后面所有模块数据在导入时都可以扩展这个


// sz※ 批处理配合异步执行任务操作，可以只保留异步执行操作

    // 修改线程池参数，不使用默认的线程池
    private ExecutorService executorService = new ThreadPoolExecutor(40, 1000, 10000, TimeUnit.MINUTES, new ArrayBlockingQueue<>(10000));


    @Test
     public void doConcurrencyInsertUsers() {
            StopWatch stopWatch = new StopWatch();
            stopWatch.start();
            // 一共插入5000*100  500000条数据    5000为一组执行
            // 分一百组？
            int batchSize = 5000;

            // 提取出来已插入的条数
            int j = 0;

            // 用并发提高插入效率 通过外层的j进行控制插入的数据条数。
            // 针对于插入的数据没有顺序，可以使用这种方式。如果需要控制并发的顺序，不能使用这种方式
            List<CompletableFuture<Void>> futureList = new CopyOnWriteArrayList<>();
            for (int i = 0; i < 100; i++) {
                // 集合需要使用安全集合
                List<User> userList = new CopyOnWriteArrayList<>();
                // 这个while循环 有讲究
                while (true) {
                    j++;
                    User user = new User();
                    user.setUsername("某政");
                    user.setUserAccount("14547557"+i);
                    user.setAvatarUrl("https://636f-codenav-8grj8px727565176-1256524210.tcb.qcloud.la/img/logo.png");
                    user.setGender(0);
                    user.setUserPassword("12345678");
                    user.setPhone("123");
                    user.setEmail("123@qq.com");
                    user.setTags("[男]");
                    user.setUserStatus(0);
                    user.setUserRole(0);
                    user.setPlanetCode(String.valueOf(i));
                    userList.add(user);

                    // 满足5000一组，则中断处理
                    if (j % batchSize == 0) {
                        break;
                    }
                }
                // 异步执行     开100个线程去执行 每个线程批处理5000条数据到数据库
                // 1.每次插入都要建立数据库连接，并关闭连接    使用Batch批处理方式处理数据
                // 2.for循环是线性的，上一次循环未执行，则需要等待  使用异步操作批处理

                // CompletableFuture.runAsync 方法 新建一个异步的任务，并指定线程池
                CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
                    System.out.println("threadName: " + Thread.currentThread().getName());
                    userService.saveBatch(userList, batchSize);
                }, executorService);

                // 将100次线程循环处理都放在futureList中
                futureList.add(future);
            }


            // 直到异步任务全部执行完毕，才会执行下一条语句
            CompletableFuture.allOf(futureList.toArray(new CompletableFuture[]{})).join();
            // 50 万条
            stopWatch.stop();
            System.out.println(stopWatch.getTotalTimeMillis());
        }


// sz※ 前端出现msg未定义问题如何解决？
	ep.workflowCheck 解析的data参数不对，指定格式为Json


// sz※ 在test条件中添加审核状态
<e:operate  href="${actionPath}!to_projectDocument.action?entity.id=^{id}" label="聘书附件上传" pop="true" popConfig="{'width':'80%','height':'95%','title':'聘书附件上传'}" test="${e:userInfo().teacher}&& ^{checkStatus} == '2'"/>



			// sz※ 清除对应不需要展示的下拉列表字典数据

            hideAllSelectProjectTypeId();
			$("select[name='entity.projectTypeId']").each(function () {
				// 将字符串通过逗号转为数组并进行遍历，获取对应的值
				for (const x of projectTypeId.split(",")) {
					$("select[name='entity.projectTypeId'] option[value="+x+"]").show();
				};
			});

		//隐藏全部的项目分类字典
		function hideAllSelectProjectTypeId(){
			// var length=$("select[name='entity.projectTypeId'] option").length;

			$("select[name='entity.projectTypeId'] option").each(function () {
				// alert($(this).val());
				$(this).hide();
			});

		}


// sz※ 判断附件是否上传和编辑附件的操作按钮
// 初始化时保存：方案审查工作表（standby3） 和 知情同意审查工作表（standby4）的初始值，在提交时判断当前评审专家是否提交
	initialStandBy3 = $("button[name='"+businessType+".standby3_upload']").parent().next().next().children().length;
	initialStandBy4 = $("button[name='"+businessType+".standby4_upload']").parent().next().next().children().length;

	// alert(initialStandBy3+"??"+initialStandBy4+"!!");




	//屏蔽伦理报告的下载按钮 和删除按钮
	$(".ep-upload-list-item").find("[name='zxProjectEthics.fileId']").next().find(".ep-upload-operate-delete").hide();
	$(".ep-upload-tip").hide();
	$("[name='zxProjectEthics.fileId_upload']").hide();
	/*初始伦理审查文件不能下载  */
	  $("#resultEditTable").find("td[name='fileId']").find(".ep-upload-operate-delete").hide();

	$("[name='zxProjectEthics.fileIdPS_upload']").hide();
	$(".ep-upload-list-item").find("[name='zxProjectEthics.fileIdPS']").next().find(".ep-upload-operate-delete").hide();



1.同步和阻塞的区别是什么？
2.线程池的问题？
3.对象头的作用？对象头的组成是什么？（需要理解锁的知识）
4.双亲委派模型可以被打破
5.双亲委派机制的缺陷？
6.数据库的主从复制问题
7.B+树的数据结构

高级问题：
1.SPI机制   https://www.jianshu.com/p/46b42f7f593c

设计模式：

数据结构  bobo老师

网络通信

cup上下文切换是什么？

书籍：https://juejin.cn/post/7050081105063444494

为什么hashmap扩容为2的倍数？ 
为什么hashmap的加载因子是0.75？

时序图